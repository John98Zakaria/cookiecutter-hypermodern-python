[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.friendly_name}}"
authors = ["{{cookiecutter.author}} <{{cookiecutter.email}}>"]
license = "{{cookiecutter.license}}"
readme = "README.md"
{% if cookiecutter.package_name != cookiecutter.project_name.replace('-', '_') -%}
packages = [
    { include = "{{cookiecutter.package_name}}", from = "src" },
]
{% endif -%}
classifiers = [
    "{{cookiecutter.development_status}}",
]

[tool.poetry.dependencies]
python = "^{{cookiecutter.python_version}}"




[tool.poetry.group.dev.dependencies]
taskipy = "^1.10.2"
black = "^22.10.0"
coverage = "^6.5.0"
flake8 = "^5.0.4"
flake8-bugbear = "^22.10.27"
isort = "^5.10.1"
mypy = "^0.990"
pep8-naming = "^0.13.2"
pre-commit = "^2.20.0"
pre-commit-hooks = "^4.3.0"
pytest = "^7.2.0"
commitizen = "^2.29.5"
mkdocs-gen-files = "^0.4.0"
mkdocs-material = "^8.3.9"
mkdocstrings = { extras = ["crystal", "python"], version = "^0.19.0" }
pymdown-extensions = "^9.5"
Pygments = "^2.12.0"
mktestdocs = "^0.2.0"


[tool.taskipy.tasks]
test = { cmd = "pytest src/tests", help = "Runs pytest on the codebase" }
mypy = { cmd = "mypy src/{{cookiecutter.package_name}}", help = "Runs static code anaylsis on the package" }
format = { cmd = "isort src && black src" }
docs-serve = { cmd = "mkdocs serve", help = "Serves the docs locally" }
docs-regen = { cmd = "python docs/generate_ref_pages.py && git add docs", help = "Regenerates the automatic documentation" }

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["{{cookiecutter.package_name}}", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 70

[tool.isort]
profile = "black"
force_single_line = true
lines_after_imports = 2

[tool.mypy]
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
warn_unused_ignores = true
no_implicit_optional = true


[tool.commitizen]
name = "cz_conventional_commits"
version = "{{cookiecutter.version}}"
tag_format = "v$version"


[build-system]
requires = ["poetry-core>=1.3.2"]
build-backend = "poetry.core.masonry.api"
